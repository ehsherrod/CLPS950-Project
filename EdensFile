% CODE RUNNING THROUGH PENTAGON TRIALS W INTRO & END SLIDE
% EDITED ON 3/22
%  INTRODUCTORY SLIDE FOR TASK
% General set-up for screen/PTB
sca;
close all;
clear;
PsychDefaultSetup(2);
screens = Screen('Screens');
screenNumber = max(screens);

% Defining colors
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% Screensize
screensize = [0 0 600 600];

% Open an on screen window and color it white
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Set the blend function for the screen
Screen('BlendFunction', window, 'GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA');

% Windowsize
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Finding center of screen
[xCenter, yCenter] = RectCenter(windowRect);

% TITLE PAGE: "Visual Search Task"
Screen('TextSize', window, 70);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'Visual Search Task', 'center', screenYpixels*0.25, black);

% Subtitles
Screen('TextSize', window, 25);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'A CLPS950 Project by Monica, Shay, & Eden', 'center', screenYpixels*0.75, black);

Screen('TextSize', window, 10);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'press any key to continue', 'center', screenYpixels*0.95, black);

% Flip to the screen
Screen('Flip', window);

% Query the frame duration
ifi = Screen('GetFlipInterval', window);

% Pressing any key to end
KbStrokeWait;

%INSTRUCTIONS SLIDE FOR TASK
% Draw text in the upper portion of the screen in Times in black
Screen('TextSize', window, 30);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'Instructions:', 'center', screenYpixels*0.35, black);

% Draw text in the middle of the screen in Times in black
Screen('TextSize', window, 20);
Screen('TextFont', window, 'Times');
Instructions = ['You will be presented figures of shapes for 3 seconds.\n\n', ...
    'Identify whether there is an inconsistent shape (non-circle) present or not.\n\n\n\n', ...
    'Record your answer when prompted by the response page by pressing the\n\n', ...
    'space bar to indicate there is an inconsistent shape present.\n\n', ...
    'Press nothing otherwise.'];  
DrawFormattedText(window, Instructions, 'center', screenYpixels*0.5, black);  

% Draw text in the lower portion of the screen in Times in black
Screen('TextSize', window, 10);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'press any key to continue', 'center', screenYpixels*0.95, black);

% Flip to the screen
Screen('Flip', window);

% Query the frame duration
%ifi = Screen('GetFlipInterval', window);

% Now we have drawn to the screen we wait for a keyboard button press (any
% key) to terminate the demo
KbStrokeWait;

% Make a base square of 40 by 40 pixels which your circle fits inside
baseSquare = [0 0 40 40];

circlecolor = black; % border color
penWidth = 3; % border width

% Define dimensions of grid using pixel coordinates, and # of shapes
DistractorX_loc = linspace(100, 500, 10);
DistractorY_loc = linspace(100, 500, 10);
%Distractor_mat = [DistractorX_loc, DistractorY_loc];

% Loops through the positions for each shape, drawing 10x10 grid of circles

% Given screen = 600 x 600 pixels, COORDINATES =
% Pentagon Location: (8, 2) = Pixel Location: (412, 145)
% Pentagon Location: (3, 7) = Pixel Location: (190, 368)
% Pentagon Location: (6, 9) = Pixel Location: (190, 368)

% If we make the locations into variables to loop through...
pent_posX = [6, 8, nan];
pent_posY = [9, 2, nan];
pent_pixelX = [322, 412, nan];
pent_pixelY = [457, 145, nan];

trial_num = 1; 

% PENTAGON TRIALS
for trial_num = 1:3
    for x = 1:length(DistractorX_loc)
        for y = 1:length(DistractorY_loc)  
            if (x == pent_posX(trial_num)) && (y == pent_posY(trial_num))
                numSides = 5;
                anglesDeg = linspace(0, 360, numSides + 1);
                anglesRad = anglesDeg * (pi / 180);
                radius = 20; 
                xPosVector = -sin(anglesRad) .* radius + pent_pixelX(trial_num);
                yPosVector = -cos(anglesRad) .* radius + pent_pixelY(trial_num);
                rectColor = black; 
                Screen('FramePoly', window, rectColor, [xPosVector; yPosVector]', penWidth);
            else 
                draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
                Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
            end
        end
    end

Screen('Flip', window);
WaitSecs(3);

% ANSWER screen
Screen('TextSize', window, 30);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'RESPONSE PAGE', 'center', screenYpixels*0.35, black);
Screen('Flip', window);
%WaitSecs(2);

%TIMING ASPECT + SCORE KEEPING

KbName('UnifyKeyNames');
activeKeys = [KbName('space')]; %accepted keys
t2wait = 2; % set value for maximum time to wait for response (in seconds)
RestrictKeysForKbCheck(activeKeys); % restrict the keys for keyboard input to the keys we want
ListenChar(2); % suppress echo to the command line for keypresses
tStart = GetSecs; % repeat until a valid key is pressed or we time out
timedout = false;
rspRT_1 = 0; 
rsp.keyCode = [];
rsp.keyName = [];
score  = 0;
while ~timedout
    [ keyIsDown, keyTime, keyCode ] = KbCheck;% check if a key is pressed, only keys specified in activeKeys are considered valid
      if(keyIsDown) %if key is pressed
          score = score+1; %score goes up by one
          break 
      end
      if( (keyTime - tStart) > t2wait)
          timedout = true
      end
  end
  % store code for key pressed and reaction time
  if(~timedout)
      rspRT_1      = keyTime - tStart;
      rsp.keyCode = keyCode;
      rsp.keyName = KbName(rsp.keyCode);
  end
score
rspRT_1
RestrictKeysForKbCheck;
ListenChar(1);
Screen('Flip', window);
WaitSecs(2);

trial_num = trial_num + 1;
end  
%% 


% TRIAL 2 PENTAGON

for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)  
        if (x == 8) && (y == 2)
            numSides = 5;
            anglesDeg = linspace(0, 360, numSides + 1);
            anglesRad = anglesDeg * (pi / 180);
            radius = 20; 
            xPosVector = -sin(anglesRad) .* radius + 412;
            yPosVector = -cos(anglesRad) .* radius + 145;
            rectColor = black; 
            Screen('FramePoly', window, rectColor, [xPosVector; yPosVector]', penWidth);
        else 
            draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
            Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
        end
    end
end
Screen('Flip', window);
WaitSecs(3);

% ANSWER screen
Screen('TextSize', window, 30);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'RESPONSE PAGE', 'center', screenYpixels*0.35, black);
Screen('Flip', window);
%WaitSecs(2);

%TIMING AND STUFF

KbName('UnifyKeyNames');
activeKeys = [KbName('space')];
t2wait = 2; 
RestrictKeysForKbCheck(activeKeys);
ListenChar(2);
tStart = GetSecs;
% repeat until a valid key is pressed or we time out
timedout = false;

rspRT = 0; 
rsp.keyCode = [];
rsp.keyName = [];
while ~timedout
    % check if a key is pressed
    % only keys specified in activeKeys are considered valid
    [ keyIsDown, keyTime, keyCode ] = KbCheck; 
      if      (keyIsDown) 
          score = score +1;
         break
      end
      if( (keyTime - tStart) > t2wait), timedout = true; end
  end
  % store code for key pressed and reaction time
  if(~timedout)
      rspRT_3     = keyTime - tStart;
      rsp.keyCode = keyCode;
      rsp.keyName = KbName(rsp.keyCode);
  end
score

ListenChar(1) 
WaitSecs(2);


% TRIAL 3 PENTAGON
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc) 
        draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
        Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
    end
end
Screen('Flip', window);
WaitSecs(3);

% ANSWER screen
Screen('TextSize', window, 30);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'RESPONSE PAGE', 'center', screenYpixels*0.35, black);
Screen('Flip', window);
%WaitSecs(2);

% TIMING ASPECT + SCORE KEEPING

KbName('UnifyKeyNames');
activeKeys = [KbName('space')];
t2wait = 2; 
RestrictKeysForKbCheck(activeKeys);
ListenChar(2);
tStart = GetSecs;
timedout = false;
rspRT_2 = 0;
rsp.keyCode = [];
rsp.keyName = [];
while ~timedout
    % check if a key is pressed
    % only keys specified in activeKeys are considered valid
    [ keyIsDown, keyTime, keyCode ] = KbCheck; 
      if ~(keyIsDown) %if key not pressed
          score = score+1;
          break
      end
      if( (keyTime - tStart) > t2wait)
          timedout = true 
      end
  end
  % store code for key pressed and reaction time
  if(~timedout)
      rspRT_2      = keyTime - tStart;
      rsp.keyCode = keyCode;
      rsp.keyName = KbName(rsp.keyCode);
  end
score
rspRT_2 
RestrictKeysForKbCheck;
ListenChar(1)
Screen('Flip', window);
WaitSecs(2);



rspRT_4 = (rspRT_1+rspRT_2+rspRT_3)/3;
rspRT_5 = round(rspRT_4,3);      

% Draw text in the upper portion of the screen in Times in black
Screen('TextSize', window, 20);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'Congratulations! You have completed the task :)', 'center', screenYpixels*0.35, black);

% Draw text in the middle of the screen in Times in black
Screen('TextSize', window, 15);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, sprintf('Your score: %d\n', score), 'center', screenYpixels*0.6, black); %After figuring out how to collect responses diplay here.

% Draw text in the middle of the screen in Times in black
Screen('TextSize', window, 15);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, sprintf('Your average response time: %d\n', rspRT_5), 'center', screenYpixels*0.8, black); %After figuring out how to collect responses diplay here.

% Draw text in the lower portion of the screen in Times in black
Screen('TextSize', window, 10);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'press any key to exit', 'center', screenYpixels*0.95, black);

% Flip to the screen
Screen('Flip', window);

% Query the frame duration
ifi = Screen('GetFlipInterval', window);

% Now we have drawn to the screen we wait for a keyboard button press (any
% key) to terminate the demo
KbStrokeWait;

% Clear the screen
sca;





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CODE TO CREATE MATRIX OF DISTRACTORS AND ONE SQUARE
% FIGURE 1
% TRIALS 1, 2, 3
% CODED ON 3/21

% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 600];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Make a base square of 40 by 40 pixels which your circle fits inside
baseSquare = [0 0 40 40];
baseSquare2 = [0 0 35 35];

% Set the color of the shapes to black, this is just a border, not fill
circlecolor = black;
squarecolor = black;

% Set the width of border
penWidth = 3;

% Define dimensions of grid using pixel coordinates, and # of shapes
DistractorX_loc = linspace(100, 500, 10);
DistractorY_loc = linspace(100, 500, 10);
Distractor_mat = [DistractorX_loc, DistractorY_loc];

% Figure Specific 
% 
% Shape Coordinates of Target = (3,2) (9,7) 
% Pixel Coordinates of Target = (189, 145) (456, 367)

% TRIAL 1 FOR SQUARE SHAPE (yes target)
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        if (x == 3) && (y==2)
            drawsquare = CenterRectOnPointd(baseSquare2, 189, 145);
            Screen('FrameRect', window, squarecolor, drawsquare, penWidth);
        else 
            draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
            Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
        end
    end
end 

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% TRIAL 2 FOR SQUARE SHAPE (yes target)
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        if (x == 9) && (y==7)
            drawsquare = CenterRectOnPointd(baseSquare2, 456, 367);
            Screen('FrameRect', window, squarecolor, drawsquare, penWidth);
        else 
            draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
            Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
        end
    end
end 

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% TRIAL 3 FOR SQUARE SHAPE (no target)
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
        % Draw the rect to the screen
        Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
    end
end

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen 
sca;






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CODE TO CREATE MATRIX OF DISTRACTORS AND ONE HEPTAGON
% FIGURE 3
% TRIALS 1, 2, 3
% CODED ON 3/21

% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 600];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Make a base square of 40 by 40 pixels which your circle fits inside
baseSquare = [0 0 40 40];

% Set the color of the circle to black, this is just a border, not fill
circlecolor = black;

% Set the width of border
penWidth = 3;

% Define dimensions of grid using pixel coordinates, and # of shapes
DistractorX_loc = linspace(100, 500, 10);
DistractorY_loc = linspace(100, 500, 10);
Distractor_mat = [DistractorX_loc, DistractorY_loc];

%Pent_pixelX_loc = [412, 190];
%Pent_pixelY_loc = [145, 368];

%Pent_coordX = [8, 3];
%Pent_coordY = [2, 7];
%Penttrial_num = 1;

% Shape Coordinates of Target = (5,10) (1,8)
% Pixel Coordinates of Target = (278, 500) (100, 411)

% TRIAL 1 (no target)
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
        % Draw the rect to the screen
        Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
    end
end
% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% TRIAL 2 (yes target)
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        if (x == 5) & (y==10)
            numSides = 7;
            anglesDeg = linspace(0, 360, numSides + 1);
            anglesRad = anglesDeg * (pi / 180);
            radius = 20;
            yPosVector = -cos(anglesRad) .* radius + 500;  
            xPosVector = -sin(anglesRad) .* radius + 278;
            rectColor = black;
            lineWidth = 3;
            Screen('FramePoly', window, rectColor, [xPosVector; yPosVector]', lineWidth);
        else 
            draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
            Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
        end
    end
end 

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% TRIAL 3 (yes target)
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        if (x == 1) & (y==8)
            numSides = 7;
            anglesDeg = linspace(0, 360, numSides + 1);
            anglesRad = anglesDeg * (pi / 180);
            radius = 20;
            yPosVector = -cos(anglesRad) .* radius + 411;
            xPosVector = -sin(anglesRad) .* radius + 100;   
            rectColor = black;
            lineWidth = 3;
            Screen('FramePoly', window, rectColor, [xPosVector; yPosVector]', lineWidth);
        else 
            draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
            Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
        end
    end
end 

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen 
sca;









%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CODE TO CREATE MATRIX OF DISTRACTORS(CIRCLES) GRID
% CODED ON 3/18
% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 600];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Make a base square of 40 by 40 pixels which your circle fits inside
baseSquare = [0 0 40 40];

% Unecessary code from demo:
% For Ovals we set a maximum diameter up to which it is perfect for
% maxDiameter = max(baseSquare) * 1.01;
% Center the rectangle on the centre of the screen
% draw_circle = CenterRectOnPointd(baseRect, DistractorX_loc(x), DistractorY_loc(y));

% Set the color of the circle to black, this is just a border, not fill
circlecolor = black;

% Set the width of border
penWidth = 3;

% Define dimensions of grid using pixel coordinates, and # of shapes
DistractorX_loc = linspace(100, 500, 10);
DistractorY_loc = linspace(100, 500, 10);
Distractor_mat = [DistractorX_loc, DistractorY_loc];

% Loops through the positions for each shape, drawing 10x10 grid of circles
for x = 1:length(DistractorX_loc)
    for y = 1:length(DistractorY_loc)
        draw_circle = CenterRectOnPointd(baseSquare, DistractorX_loc(x), DistractorY_loc(y));
        % Draw the rect to the screen
        Screen('FrameOval', window, circlecolor, draw_circle, penWidth);
    end
end

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen 
sca; 






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CODE FOR INDIVIDUAL FIGURES USED IN TRIAL

% PENTAGON CODE
% CODED ON 3/18
% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 400];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Number of sides for our polygon
numSides = 5;

% Angles at which our polygon vertices endpoints will be. We start at zero
% and then equally space vertex endpoints around the edge of a circle. The
% polygon is then defined by sequentially joining these end points.
anglesDeg = linspace(0, 360, numSides + 1);
anglesRad = anglesDeg * (pi / 180);
radius = 200;

% X and Y coordinates of the points defining out polygon, centred on the
% centre of the screen
yPosVector = -cos(anglesRad) .* radius + yCenter;
xPosVector = -sin(anglesRad) .* radius + xCenter;

% Set the color of the rect to red
rectColor = black;

% Width of the lines for our frame
lineWidth = 6;

% Draw the rect to the screen
Screen('FramePoly', window, rectColor, [xPosVector; yPosVector]', lineWidth);

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen
sca;




% CIRCLE CODE
% CODED ON 3/17
% CREATES A SINGLE FRAMED CIRCLE
% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 400];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Make a base Rect of 200 by 250 pixels
baseRect = [0 0 200 200];

% For Ovals we set a maximum diameter up to which it is perfect for
maxDiameter = max(baseRect) * 1.01;

% Center the rectangle on the centre of the screen
draw_oval = CenterRectOnPointd(baseRect, xCenter, yCenter);

% Set the color of the rect to black
rectColor = black;

% Set the width of border
penWidth = 6;

% Draw the rect to the screen
Screen('FrameOval', window, rectColor, draw_oval, penWidth);

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen 
sca;



% SQUARE CODE
% CODES FOR A SINGLE FRAMED SQUARE
% CODED ON 3/17
% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 600];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Make a base Rect of 200 by 200 pixels
baseRect = [0 0 40 40];

drawsquare = CenterRectOnPointd(baseRect, xCenter, yCenter);

% Set the colors to Red, Green and Blue
squarecolor = black;

% Pen width for the frames
penWidthPixels = 3; 

% Draw the rect to the screen
Screen('FrameRect', window, squarecolor, drawsquare, penWidthPixels);

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen
sca; 


% OCTAGON CODE
% CODED ON 3/17
% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers
screens = Screen('Screens');

% Draw to the external screen if avaliable
screenNumber = max(screens);

% Define black and white
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);

% haley addition
screensize = [0 0 600 400];

% Open an on screen window
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window
[xCenter, yCenter] = RectCenter(windowRect);

% Number of sides for our polygon
numSides = 8;

% Angles at which our polygon vertices endpoints will be. We start at zero
% and then equally space vertex endpoints around the edge of a circle. The
% polygon is then defined by sequentially joining these end points.
anglesDeg = linspace(0, 360, numSides + 1);
anglesRad = anglesDeg * (pi / 180);
radius = 200;

% X and Y coordinates of the points defining out polygon, centred on the
% centre of the screen
yPosVector = sin(anglesRad) .* radius + yCenter;
xPosVector = cos(anglesRad) .* radius + xCenter;

% Set the color of the rect to red
rectColor = black;

% Width of the lines for our frame
lineWidth = 6;

% Draw the rect to the screen
Screen('FramePoly', window, rectColor, [xPosVector; yPosVector]', lineWidth);

% Flip to the screen
Screen('Flip', window);

% Wait for a key press
KbStrokeWait;

% Clear the screen
sca;






%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  INTRODUCTORY SLIDE FOR TASK
% CODED ON 3/16
% Clear the workspace and the screen
sca;
close all;
clear;

% Here we call some default settings for setting up Psychtoolbox
PsychDefaultSetup(2);

% Get the screen numbers. This gives us a number for each of the screens
% attached to our computer.
screens = Screen('Screens');

% To draw we select the maximum of these numbers. So in a situation where we
% have two screens attached to our monitor we will draw to the external
% screen.
screenNumber = max(screens);

% Define black and white (white will be 1 and black 0). This is because
% in general luminace values are defined between 0 and 1 with 255 steps in
% between. With our setup, values defined between 0 and 1.
white = WhiteIndex(screenNumber);
black = BlackIndex(screenNumber);
grey = white / 2;

% haley addition
screensize = [0 0 600 400];

% Open an on screen window and color it white
[window, windowRect] = PsychImaging('OpenWindow', screenNumber, white, screensize);

% Set the blend funciton for the screen
Screen('BlendFunction', window, 'GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA');

% Get the size of the on screen window
[screenXpixels, screenYpixels] = Screen('WindowSize', window);

% Get the centre coordinate of the window in pixels
% For help see: help RectCenter
[xCenter, yCenter] = RectCenter(windowRect);

% Draw text in the upper portion of the screen in Times in black
Screen('TextSize', window, 70);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'Visual Search Task', 'center', screenYpixels*0.25, black);

% Draw text in the lower portion of the screen in Times in black
Screen('TextSize', window, 25);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'A CLPS950 Project by Monica, Shay, & Eden', 'center', screenYpixels*0.75, black);

% Draw text in the lower portion of the screen in Times in black
Screen('TextSize', window, 10);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'press any key to continue', 'center', screenYpixels*0.95, black);

% Flip to the screen
Screen('Flip', window);

% Query the frame duration
ifi = Screen('GetFlipInterval', window);

% Now we have drawn to the screen we wait for a keyboard button press (any
% key) to terminate the demo
KbStrokeWait;

%INSTRUCTIONS SLIDE FOR TASK
% CODED ON 3/16
% Draw text in the upper portion of the screen in Times in black
Screen('TextSize', window, 30);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'Instructions:', 'center', screenYpixels*0.35, black);

% Draw text in the middle of the screen in Times in black
Screen('TextSize', window, 15);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'For each image displayed, identify whether there is an inconsistent shape present or not', 'center', screenYpixels*0.6, black);

% Draw text in the lower portion of the screen in Times in black
Screen('TextSize', window, 10);
Screen('TextFont', window, 'Times');
DrawFormattedText(window, 'press any key to continue', 'center', screenYpixels*0.95, black);

% Flip to the screen
Screen('Flip', window);

% Query the frame duration
ifi = Screen('GetFlipInterval', window);

% Now we have drawn to the screen we wait for a keyboard button press (any
% key) to terminate the demo
KbStrokeWait;

% Clear the screen
sca;
